<%- include('./partials/header.ejs') %>

    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>

      <div id="conversation-list">
        <%if(data && data.length > 0){%>
          <% data.map((conversation)=>{ %>
            <!-- IF LOGGED IN USER IS CONVERSATION CREATOR THEN WE WILL SHOW PARTICIPANT INFO -->
              <% if(conversation.creator.id == loggedInUser.userid){%>
                <!-- PARTICIPANT INFO -->
                <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
                  <% if(conversation.participant.avatar){ %>
                  <img src="./uploads/avatars/<%= conversation.participant.avatar %>" alt="Sumit" />
                  <% }else{  %>
                    <img src="./images/nophoto.png" alt="Sumit" />
                  <% } %>
                  <div class="title-text"><%= conversation.participant.name %></div>
                  <div class="conversation-date"><%= moment(conversation.last_updated).fromNow() %></div>
                </div>
              <% }else{ %>
                <!-- CREATOR INFO -->
                <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')">
                  <% if(conversation.creator.avatar){ %>
                  <img src="./uploads/avatars/<%= conversation.creator.avatar %>" alt="Sumit" />
                  <% }else{  %>
                    <img src="./images/nophoto.png" alt="Sumit" />
                  <% } %>
                  <div class="title-text"><%= conversation.creator.name %></div>
                  <div class="conversation-date"> <%= moment(conversation.last_updated).fromNow() %> </div>
                </div>
              <% } %>
            <% }); %>
        <% }else{ %>          
          <!-- IF WE DON'T FIND ANY CONVERSATION WE WILL SHOW EMPTY CONVERSATION -->
          <div class="nothing"><img src="./images/no-conversation.svg" alt="No Conversation"></div>
        <% }  %>
      </div>

      <!-- Add New Conversation Button -->
      <div class="new-message-container" onclick="openModal()">
        <a href="#">+</a>
      </div>

      <div id="chat-title">
        <span id="conversation-partner"></span>
        <img src="./images/trash.png" alt="Delete Conversation" />
      </div>

      <!-- Placeholder div if no messages are in message area! -->
      <div id="chat-message-list">
        <div class="nothing">Select a conversation!</div>
      </div>

      <!-- Send Message with attachment form -->
      <form id="chat-form" action="/inbox/message" method="post" enctype="multipart/form-data">
        <label for="attachment"><img src="./images/attachment.png" alt="Add Attachment" /></label>
        <input type="file" name="attachment" id="attachment" class="hide" multiple>
        <input type="text" name="message" placeholder="Type a message" autocomplete="off" />
      </form>

    </div>
        <%- include('./partials/add-conversation-modal.ejs') %>
  </body>
    <!-- import socket io client from cdn -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

  <script>

    // Select Messages related elements for DOM Munipolation:
    const form = document.querySelector('#chat-form');
    const messageContainer = document.querySelector("#chat-message-list");
    const chatTitleContainer = document.querySelector("#conversation-partner");
    const loggedinUserId = '<%= loggedInUser.userid %>';
    const loggedinUserName = '<%= loggedInUser.username %>';
    let participant = null; //Selected Conversation Participant Object;
    let current_conversation_id; //Selected Conversation ID;
   
    // Socket Initialization:
    const socket = io('<%= process.env.APP_URL %>')

    // HANDLE NEW/LIVE INCOMINT MESSAGE FROM SOCKET:
    socket.on('new_message', (data)=>{
      if(data.message.conversation_id == current_conversation_id){
      // message class
      const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
      
      const senderAvatar = data.message.sender.avatar ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />` : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;
      // message attachments
      let attachments = '<div class="attachments">';
      if(data.message.attachment && data.message.attachment.length > 0) {
        data.message.attachment.forEach(attachment => {
          attachments += `<img class="attachment-img" src="./uploads/attachments/${attachment}" /> `;
        });
      }
      attachments += '</div>';
      let messageHTML;
      // do not show avatar for loggedin user
      if(data.message.sender.id == loggedinUserId) {
          messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
            <div class="message-text">${data.message.message}</div>
            ${attachments}
            <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
          </div></div>`;
        } else {
          messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
            ${senderAvatar}
            <div class="message-text">${data.message.message}</div>
            ${attachments}
            <div class="message-time">${moment(data.message.date_time).fromNow()}</div>
          </div></div>`;
        }
      // append the inoming message to message area as last item
      document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHTML);        
      }
    })

    // GET MESSAGES OF A CONVERSATION:
    const getMessages = async(conversation_id, current_conversation_name)=>{
      
        // messages failure toast
        const messagesFailureToast = Toastify({
          text: "Error loading messages!",
          duration: 1000,
        });

        let response = await fetch(`/inbox/messages/${conversation_id}`);
        const result= await response.json();
        if(!result.errors && result.data) {
            form.style.visibility = 'visible';
            
            const {data, user, conversation_id} = result;
            participant = data.participant;
            current_conversation_id = conversation_id;
            if(data.messages) {
              let allMessages = '';
              if(data.messages.length > 0) {
                data.messages.forEach((message) => {
                  let senderAvatar = message.sender.avatar ? `./uploads/avatars/${message.sender.avatar}` : './images/nophoto.png';
                  const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                  const showAvatar = message.sender.id === loggedinUserId ? '' : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;
                  // message attachments
                  let attachments = '<div class="attachments">';
                  if(message.attachment && message.attachment.length > 0) {
                    message.attachment.forEach(attachment => {
                      attachments += `<img class="attachment-img" src="./uploads/attachments/${attachment}" /> `;
                    });
                  }
                  attachments += '</div>';
                  // final message html
                  let messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
                      ${showAvatar}
                      <div class="message-text">${message.text}</div>
                      ${attachments}
                      <div class="message-time">${moment(message.date_time).fromNow()}</div>
                    </div></div>`;
                  allMessages += messageHTML;
                  messageContainer.innerHTML = allMessages;
                });
              } else if(data.messages.length === 0) {
                messageContainer.innerHTML = '<div class="message-row"></div>';
              }
              chatTitleContainer.textContent = current_conversation_name;
            }
        } else {
          messagesFailureToast.showToast();
        }
      }

    // MESSAGE SENDING:
    form.onsubmit = async function(event){
      event.preventDefault();
    const sendMessageFailureToast = Toastify({
      text: "Error sending message",
      duration: 1000,
    });
    // prepare the form data
    const formData = new FormData(form);
    formData.append('receiverId', participant.id);
    formData.append('receiverName', participant.name);
    formData.append('avatar', participant.avatar || '');
    formData.append('conversationId', current_conversation_id);

    // send the request to server
    let response = await fetch("/inbox/message", {
      method: "POST",
      body: formData,
    });
    // get response
    let result = await response.json();
    if (!result.errors) {
      form.reset(); // reset the form
    } else {
      sendMessageFailureToast.showToast();
    }

    }

  </script>
</html>
